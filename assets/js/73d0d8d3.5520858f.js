"use strict";(self.webpackChunkchg_training_resources=self.webpackChunkchg_training_resources||[]).push([[1875],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(t),g=i,f=c["".concat(p,".").concat(g)]||c[g]||m[g]||a;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=g;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},35843:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(87462),i=(t(67294),t(3905));const a={},o=void 0,s={unversionedId:"programming/pipelining_with_snakemake/snakefile3",id:"programming/pipelining_with_snakemake/snakefile3",title:"snakefile3",description:"---",source:"@site/docs/programming/pipelining_with_snakemake/05_snakefile3.md",sourceDirName:"programming/pipelining_with_snakemake",slug:"/programming/pipelining_with_snakemake/snakefile3",permalink:"/chg-training-resources/programming/pipelining_with_snakemake/snakefile3",draft:!1,editUrl:"https://github.com/chg-training/chg-training-resources/edit/main/docs/programming/pipelining_with_snakemake/05_snakefile3.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"sidebar5",previous:{title:"Using snakemake",permalink:"/chg-training-resources/programming/pipelining_with_snakemake/using_snakemake"}},p={},l=[{value:"sidebar_position: 2",id:"sidebar_position-2",level:2}],u={toc:l},c="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"sidebar_position-2"},"sidebar_position: 2"),(0,i.kt)("h1",{id:"completed-snakemake-example"},"Completed snakemake example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"rule all:\n    input: 'output/all.tsv'\n\n\nrule make_tsv_from_gff:\n    input: 'data/Bos_taurus.ARS-UCD1.2.110.primary_assembly.{num}.gff3.gz'\n    output: 'output/parsed_{num}.tsv'\n    shell: 'Rscript --vanilla scripts/summarise_ensembl_gff.R --input {input} --output {output}'\n\n\nrule concatenate_tsvs:\n    \"\"\"\n    This rule takes all the tsv files generated by the above rule as input. \n    We are using the expand() function here, but please modify the numbers within \n    the list [ ] to match the gff files that you downloaded.\n    \"\"\"\n    input: expand('output/parsed_{num}.tsv', num=[1, 2, 3])\n    output: 'output/all.tsv'\n    shell: \n        \"\"\"\n        cat {input} | head -n1 > {output} &&\\\n        tail -q -n+2 {input} >> {output}\n        \"\"\" \n")))}m.isMDXComponent=!0}}]);