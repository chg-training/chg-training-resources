"use strict";(self.webpackChunkchg_training_resources=self.webpackChunkchg_training_resources||[]).push([[2481],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(a),c=r,g=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return a?n.createElement(g,o(o({ref:t},d),{},{components:a})):n.createElement(g,o({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},72360:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),r=a(86010);const i={tabItem:"tabItem_OmH5"};function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:a},t)}},9877:(e,t,a)=>{a.d(t,{Z:()=>u});var n=a(87462),r=a(67294),i=a(72389),o=a(67392),l=a(7094),s=a(12466),p=a(86010);const d={tabList:"tabList_uSqn",tabItem:"tabItem_LplD"};function m(e){const{lazy:t,block:a,defaultValue:i,values:m,groupId:u,className:c}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),k=(0,o.l)(h,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===i?i:i??g.find((e=>e.props.default))?.props.value??g[0]?.props.value;if(null!==N&&!h.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:b}=(0,l.U)(),[v,y]=(0,r.useState)(N),_=[],{blockElementScrollPositionUntilNextRender:w}=(0,s.o5)();if(null!=u){const e=f[u];null!=e&&e!==v&&h.some((t=>t.value===e))&&y(e)}const x=e=>{const t=e.currentTarget,a=_.indexOf(t),n=h[a].value;n!==v&&(w(t),y(n),null!=u&&b(u,n))},T=e=>{let t=null;switch(e.key){case"ArrowRight":{const a=_.indexOf(e.currentTarget)+1;t=_[a]||_[0];break}case"ArrowLeft":{const a=_.indexOf(e.currentTarget)-1;t=_[a]||_[_.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,p.Z)("tabs-container",d.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":a},c)},h.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>_.push(e),onKeyDown:T,onFocus:x,onClick:x},i,{className:(0,p.Z)("tabs__item",d.tabItem,i?.className,{"tabs__item--active":v===t})}),a??t)}))),t?(0,r.cloneElement)(g.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function u(e){const t=(0,i.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},58635:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var n=a(87462),r=(a(67294),a(3905)),i=a(9877),o=a(72360);const l={sidebar_position:5},s="Testing it out",p={unversionedId:"bioinformatics/programming_with_gene_annotations3/testing_it_out",id:"bioinformatics/programming_with_gene_annotations3/testing_it_out",title:"Testing it out",description:"Hopefully you have now got a working function, read_gff() and got the extremely rewarding message:",source:"@site/docs/bioinformatics/programming_with_gene_annotations3/005_testing_it_out.md",sourceDirName:"bioinformatics/programming_with_gene_annotations3",slug:"/bioinformatics/programming_with_gene_annotations3/testing_it_out",permalink:"/chg-training-resources/bioinformatics/programming_with_gene_annotations3/testing_it_out",draft:!1,editUrl:"https://github.com/chg-training/chg-training-resources/edit/main/docs/bioinformatics/programming_with_gene_annotations3/005_testing_it_out.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"sidebar2",previous:{title:"Extracting more attributes",permalink:"/chg-training-resources/bioinformatics/programming_with_gene_annotations3/004b_more_attributes"},next:{title:"Quick recap",permalink:"/chg-training-resources/bioinformatics/programming_with_gene_annotations3/recap"}},d={},m=[{value:"Trying some real data",id:"trying-some-real-data",level:2},{value:"The data &#39;verbs&#39;",id:"the-data-verbs",level:3},{value:"Next steps",id:"next-steps",level:2}],u={toc:m},c="wrapper";function g(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"testing-it-out"},"Testing it out"),(0,r.kt)("p",null,"Hopefully you have now got a working function, ",(0,r.kt)("inlineCode",{parentName:"p"},"read_gff()")," and got the extremely rewarding message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"++ test_read_gff(): Congratulations,all tests passed!\n")),(0,r.kt)("p",null,"In addition it will be useful for your function to ",(0,r.kt)("em",{parentName:"p"},"also")," extract the 'gene_type' and 'gene_name' attributes, because these are useful in the gencode files."),(0,r.kt)("p",null,"If you haven't reached this point, don't worry!  Here is my solution:"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Solution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)(i.Z,{groupId:"solutions",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"teaser",label:"Your solution",mdxType:"TabItem"},(0,r.kt)("p",{parentName:"div"},"Please feel free to use your solution, if it's working.  If not, see the tabs for my solutions.")),(0,r.kt)(o.Z,{value:"R",label:"R solution, simpler version",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-r"},"read_gff = function(\n    filename\n) {\n    result = readr::read_tsv(\n        filename,\n        comment = '#',\n        na = \".\",\n        col_names = c( 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ),\n        col_types = readr::cols(\n            readr::col_character(),\n            readr::col_character(),\n            readr::col_character(),\n            readr::col_integer(),\n            readr::col_double(),\n            readr::col_double(),\n            readr::col_character(),\n            readr::col_integer(),\n            readr::col_character()\n        )\n    )\n    result[['ID']] = stringr::str_extract( result[['attributes']], 'ID=([^;]+)', group = TRUE )\n    result[['Parent']] = stringr::str_extract( result[['attributes']], 'Parent=([^;]+)', group = TRUE )\n    result[['gene_type']] = stringr::str_extract( result[['attributes']], 'gene_type=([^;]+)', group = TRUE )\n    result[['gene_name']] = stringr::str_extract( result[['attributes']], 'gene_name=([^;]+)', group = TRUE )\n    return( result )\n"))),(0,r.kt)(o.Z,{value:"python",label:"python solution, simpler version",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def read_gff( file ):\n    import pandas\n    result = pandas.read_table(\n        file,\n        comment = '#',\n        names = [ 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ],\n        na_values = '.',\n        dtype = {\n            'seqid': str,\n            'source': str,\n            'type': str,\n            'start': int,\n            'end': int,\n            'score': float,\n            'strand': str,\n            'phase': str,\n            'attributes': str\n        }\n    )\n    result['ID'] = result.attributes.str.extract( 'ID=([^;]+)' )\n    result['Parent'] = result.attributes.str.extract( 'Parent=([^;]+)\n    result['gene_type'] = result.attributes.str.extract( 'gene_type=([^;]+)' )\n    result['gene_name'] = result.attributes.str.extract( 'gene_name=([^;]+)\n    return result\n"))),(0,r.kt)(o.Z,{value:"R2",label:"R solution, post-challenge version",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-r"},"read_gff = function(\n    filename,\n    extra_attributes = c( \"gene_type\", \"gene_name\" )\n) {\n    result = readr::read_tsv(\n        filename,\n        comment = '#',\n        na = \".\",\n        col_names = c( 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ),\n        col_types = readr::cols(\n            readr::col_character(),\n            readr::col_character(),\n            readr::col_character(),\n            readr::col_integer(),\n            readr::col_double(),\n            readr::col_double(),\n            readr::col_character(),\n            readr::col_integer(),\n            readr::col_character()\n        )\n    )\n\n    # Put ID and Parent at the start.\n    result = tibble::add_column(result, ID = NA, .before = 1)\n    result = tibble::add_column(result, Parent = NA, .before = 2)\n\n    # Now extract all the attributes\n    for( attribute in c( \"ID\", \"Parent\", extra_attributes )) {\n        # Create the appropriate regex using `sprintf()`\n        regex = sprintf(\"%s=([^;]+)[;|$]\", attribute)\n        # Extract the attribute...\n        result[[attribute]] = stringr::str_extract(result[[\"attributes\"]], regex, group = TRUE)\n        # ...and remove it from the attributes column.\n        result[[\"attributes\"]] = stringr::str_remove(result[[\"attributes\"]], regex)\n    }\n    return( result )\n}\n"))),(0,r.kt)(o.Z,{value:"python2",label:"python solution, post-challenge version",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def read_gff( file, extra_attributes = [] ):\n    import pandas\n    result = pandas.read_table(\n        file,\n        comment = '#',\n        names = [ 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ],\n        na_values = '.',\n        dtype = {\n            'seqid': str,\n            'source': str,\n            'type': str,\n            'start': int,\n            'end': int,\n            'score': float,\n            'strand': str,\n            'phase': str,\n            'attributes': str\n        }\n    )\n    result.insert( loc = 0, column = 'ID', value = None )\n    result.insert( loc = 1, column = 'Parent', value = None )\n    for attribute in [ 'ID', 'Parent' ] + extra_attributes:\n        regexp = '%s=([^;]+)[;|$]' % attribute\n        result[attribute] = result.attributes.str.extract( regexp )\n        result[\"attributes\"] = result[\"attributes\"].str.replace( regexp, \"\" )\n    return result\n")))))),(0,r.kt)("h2",{id:"trying-some-real-data"},"Trying some real data"),(0,r.kt)("p",null,"Let's use this to do some work on some real data now.  Load up the gencode data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'gencode = read_gff( "gencode.v41.annotation.gff3.gz" )\n')),(0,r.kt)("p",null,"Use your R skills ",(0,r.kt)("a",{parentName:"p",href:"/chg-training-resources/bioinformatics/introduction_to_R/working_with_data"},"from the Introduction to R tutorial")," or python\nskills to view these files and explore a bit - for example pulling out all gene records, or records pertaining to\nspecific genes.  (For example you could look at ",(0,r.kt)("em",{parentName:"p"},"FUT2"),".)"),(0,r.kt)("h3",{id:"the-data-verbs"},"The data 'verbs'"),(0,r.kt)("p",null,"Now is a good point to introduce in a bit more detail a set of ",(0,r.kt)("em",{parentName:"p"},"data manipulation verbs")," that make working with data\nframes easy.  You've already been working with several of these - ",(0,r.kt)("inlineCode",{parentName:"p"},"filter"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"group by"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"summarise"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"arrange"),".\nWe'll describe a couple more 'verbs' - 'join' and 'select' - below.  "),(0,r.kt)("p",null,"We'll calling them data 'verbs' because they ",(0,r.kt)("em",{parentName:"p"},"do")," things to dataframes.  For example"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Operation"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"R/dplyr function"),(0,r.kt)("th",{parentName:"tr",align:null},"pandas/polars function"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"select")),(0,r.kt)("td",{parentName:"tr",align:null},"selects (and optionally renames) ",(0,r.kt)("strong",{parentName:"td"},"columns")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"select()")),(0,r.kt)("td",{parentName:"tr",align:null},"?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mutate")),(0,r.kt)("td",{parentName:"tr",align:null},"adds columns"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mutate()")),(0,r.kt)("td",{parentName:"tr",align:null},"?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"filter")),(0,r.kt)("td",{parentName:"tr",align:null},"filters rows based on column values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"filter()")),(0,r.kt)("td",{parentName:"tr",align:null},"?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"arrange")," or sort"),(0,r.kt)("td",{parentName:"tr",align:null},"orders rows"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"arrange()")),(0,r.kt)("td",{parentName:"tr",align:null},"?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"group by")),(0,r.kt)("td",{parentName:"tr",align:null},"groups rows based on column values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"group_by()")),(0,r.kt)("td",{parentName:"tr",align:null},"?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"summarise")),(0,r.kt)("td",{parentName:"tr",align:null},"computes summary values over the rows"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"summarise()")),(0,r.kt)("td",{parentName:"tr",align:null},"?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"join")),(0,r.kt)("td",{parentName:"tr",align:null},"joins two dataframes together, based on shared values."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"inner_join"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"outer_join"),", etc."),(0,r.kt)("td",{parentName:"tr",align:null},"?")))),(0,r.kt)("p",null,"You can build these into pipelines you can conduct complex data manipulation tasks in a highly expressive way."),(0,r.kt)("p",null,"For example, here's a simple way to use ",(0,r.kt)("inlineCode",{parentName:"p"},"filter()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"filter( X, ID == `ENSG00000176920.13` )\n")),(0,r.kt)("p",null,"If we also wanted to filter out"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("p",{parentName:"div"},"For example, here's a cool way to filter the dataframe - using a kind of 'pipe', just like the one in bash.\nInstead of using ",(0,r.kt)("inlineCode",{parentName:"p"},"filter()")," like this:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"filter( gencode, ID == `ENSG00000176920.13` )\n")),(0,r.kt)("p",{parentName:"div"},"you can write"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"X %>% filter( ID == `ENSG00000176920.13` )\n")),(0,r.kt)("p",{parentName:"div"},"Here ",(0,r.kt)("inlineCode",{parentName:"p"},"%>%")," plays the same role as ",(0,r.kt)("inlineCode",{parentName:"p"},"|")," does in bash - it ",(0,r.kt)("em",{parentName:"p"},"pipes")," the output of one command into the input of the next.\nThe advantage is that you can put multiple things in the same pipeline.  For example let's find all the ",(0,r.kt)("em",{parentName:"p"},"FUT2")," transcripts\nthat start before ",(0,r.kt)("inlineCode",{parentName:"p"},"chr19:48,696,000"),":"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"(\n    gencode\n    %>% filter( Parent == 'ENSG00000176920.13' )\n    %>% filter( start < 48696000 )\n)\n\n")),(0,r.kt)("p",{parentName:"div"},"So, just like in the command-line, you can build up ",(0,r.kt)("em",{parentName:"p"},"pipelines")," of commands to get the data you want.  This filtering\nsyntax is a feature of ",(0,r.kt)("a",{parentName:"p",href:"https://dplyr.tidyverse.org"},"dplyr"),", which is part of ",(0,r.kt)("a",{parentName:"p",href:"https://www.tidyverse.org"},"tidyverse"),".")),(0,r.kt)(o.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("p",{parentName:"div"},"Here's a cool way to filter the data frame by rows in python - use\n",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html"},(0,r.kt)("inlineCode",{parentName:"a"},"query()")),".  This takes a string as an\nexpression, for example:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"gencode.query( \"ID == 'ENSG00000176920.13'\" )\n")),(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"query()")," function is actually part of the dataframe object (it's a 'method' of the dataframe), which is why you can\ncall it in the style '",(0,r.kt)("inlineCode",{parentName:"p"},"object.method()"),"'."),(0,r.kt)("p",{parentName:"div"},"This also makes it easy to chain multiple filtering criteria together. For example, let's find all the ",(0,r.kt)("em",{parentName:"p"},"FUT2"),"\ntranscripts that start before ",(0,r.kt)("inlineCode",{parentName:"p"},"chr19:48,696,000"),":"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'(\n    gencode\n    .query( "Parent == \'ENSG00000176920.13\'" )\n    .query( "start < 48696000" )\n)\n')),(0,r.kt)("p",{parentName:"div"},"This dataframe and filtering syntax is part of ",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org"},"pandas"),"."))))),(0,r.kt)("p",null,"If it's working, well done!"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Another great thing to do is ",(0,r.kt)("em",{parentName:"p"},"group")," and ",(0,r.kt)("em",{parentName:"p"},"count")," the data - much like the ",(0,r.kt)("a",{parentName:"p",href:"/chg-training-resources/bioinformatics/exploring_gene_annotations_in_bash/counting"},"pipeline using ",(0,r.kt)("inlineCode",{parentName:"a"},"uniq -c")," in\nBASH"),".  For example let's make a count of record\ntypes:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-r"},"(\n    gencode\n    %>% group_by( type )\n    %>% summarise( count = n() )\n)\n")),(0,r.kt)("p",{parentName:"div"},(0,r.kt)("strong",{parentName:"p"},"Note"),". Another way to do this is R's built-in function ",(0,r.kt)("inlineCode",{parentName:"p"},"table()"),":"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"table( gencode$type )\n"))),(0,r.kt)(o.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'(\n    gencode\n    .groupby( "type" )\n    .agg({ "ID": \'count\' })\n)\n')),(0,r.kt)("p",{parentName:"div"},"This works, but I personally find this piece of code and its output harder to understand than the R / dplyr version.\nAnother way to do this in pandas is to use the simpler ",(0,r.kt)("inlineCode",{parentName:"p"},"value_counts()"),":"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"gencode['type'].value_counts()\n")),(0,r.kt)("p",{parentName:"div"},"...although that returns something called a 'Series', as opposed to a data frame."))))),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"As you start to play around with loading multiple files, keep an eye on the memory usage of your process.  (You can do\nthis in your system monitor, or by opening a terminal and running:"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"top -u <username> -o '%MEM'")," on linux or Ubuntu for Windows; or"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"top -U gav -o MEM")," in Mac OS")))),(0,r.kt)("h2",{id:"next-steps"},"Next steps"),(0,r.kt)("p",null,"A better way to solve the memory issue to store the data in a database and only load what's needed into memory - we'll\nsee a way to do that ",(0,r.kt)("a",{parentName:"p",href:"./008_Converting_gff_to_sqlite.md"},"later"),".  But first let's ",(0,r.kt)("a",{parentName:"p",href:"./007_making_a_module.md"},"package up the\ncode"),"."))}g.isMDXComponent=!0}}]);