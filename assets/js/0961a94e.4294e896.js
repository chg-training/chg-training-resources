"use strict";(self.webpackChunkchg_training_resources=self.webpackChunkchg_training_resources||[]).push([[4223],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),h=o,g=u["".concat(l,".").concat(h)]||u[h]||m[h]||r;return t?a.createElement(g,s(s({ref:n},p),{},{components:t})):a.createElement(g,s({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=h;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},72360:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(67294),o=t(86010);const r={tabItem:"tabItem_OmH5"};function s(e){let{children:n,hidden:t,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,s),hidden:t},n)}},9877:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(87462),o=t(67294),r=t(72389),s=t(67392),i=t(7094),l=t(12466),c=t(86010);const p={tabList:"tabList_uSqn",tabItem:"tabItem_LplD"};function u(e){const{lazy:n,block:t,defaultValue:r,values:u,groupId:m,className:h}=e,g=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),d=u??g.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),_=(0,s.l)(d,((e,n)=>e.value===n.value));if(_.length>0)throw new Error(`Docusaurus error: Duplicate values "${_.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===r?r:r??g.find((e=>e.props.default))?.props.value??g[0]?.props.value;if(null!==b&&!d.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${d.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:v}=(0,i.U)(),[y,k]=(0,o.useState)(b),w=[],{blockElementScrollPositionUntilNextRender:N}=(0,l.o5)();if(null!=m){const e=f[m];null!=e&&e!==y&&d.some((n=>n.value===e))&&k(e)}const A=e=>{const n=e.currentTarget,t=w.indexOf(n),a=d[t].value;a!==y&&(N(n),k(a),null!=m&&v(m,a))},O=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;n=w[t]||w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;n=w[t]||w[w.length-1];break}}n?.focus()};return o.createElement("div",{className:(0,c.Z)("tabs-container",p.tabList)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":t},h)},d.map((e=>{let{value:n,label:t,attributes:r}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:y===n?0:-1,"aria-selected":y===n,key:n,ref:e=>w.push(e),onKeyDown:O,onFocus:A,onClick:A},r,{className:(0,c.Z)("tabs__item",p.tabItem,r?.className,{"tabs__item--active":y===n})}),t??n)}))),n?(0,o.cloneElement)(g.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},g.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==y})))))}function m(e){const n=(0,r.Z)();return o.createElement(u,(0,a.Z)({key:String(n)},e))}},38419:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));t(9877),t(72360);const r={sidebar_position:1},s="A naive approach",i={unversionedId:"bioinformatics/analysing_genes_across_species/how_much_in_genes/naive_approach",id:"bioinformatics/analysing_genes_across_species/how_much_in_genes/naive_approach",title:"A naive approach",description:"Figuring out the proportion in genes should be pretty easy using the dplyr data verbs,",source:"@site/docs/bioinformatics/analysing_genes_across_species/how_much_in_genes/001_naive_approach.md",sourceDirName:"bioinformatics/analysing_genes_across_species/how_much_in_genes",slug:"/bioinformatics/analysing_genes_across_species/how_much_in_genes/naive_approach",permalink:"/chg-training-resources/bioinformatics/analysing_genes_across_species/how_much_in_genes/naive_approach",draft:!1,editUrl:"https://github.com/chg-training/chg-training-resources/edit/main/docs/bioinformatics/analysing_genes_across_species/how_much_in_genes/001_naive_approach.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sidebar2",previous:{title:"How much of the genome is in genes?",permalink:"/chg-training-resources/bioinformatics/analysing_genes_across_species/how_much_in_genes/"},next:{title:"An algorithm to merge regions",permalink:"/chg-training-resources/bioinformatics/analysing_genes_across_species/how_much_in_genes/an_algorithm_to_merge_regions"}},l={},c=[],p={toc:c},u="wrapper";function m(e){let{components:n,...r}=e;return(0,o.kt)(u,(0,a.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"a-naive-approach"},"A naive approach"),(0,o.kt)("p",null,"Figuring out the proportion in genes should be pretty easy using ",(0,o.kt)("a",{parentName:"p",href:"/chg-training-resources/bioinformatics/analysing_genes_across_species/filter_join_merge"},"the dplyr data verbs"),",\nright?. We could"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"group genes by species and chromosome"),(0,o.kt)("li",{parentName:"ol"},"compute the total length by summing"),(0,o.kt)("li",{parentName:"ol"},"join to the ",(0,o.kt)("inlineCode",{parentName:"li"},"contigs")," dataset to compute total chromosome/region length"),(0,o.kt)("li",{parentName:"ol"},"and then summarise.")),(0,o.kt)("p",null,"Here's a function that does 1-3 above:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-r"},'compute_lengths_per_chromosome = function(\n   data,\n   chromosomes = contigs\n) {\n   (\n      data\n      # Group by species / chromosome\n      %>% group_by( dataset, seqid )\n      # Add up the gene lengths\n      %>% summarise(\n         number_of_genes = n(),\n         total_gene_length = sum( end - start + 1 )\n      )\n      # Add the chromosome lengths\n      %>% left_join(\n         chromosomes[, c( "dataset", "seqid", "attributes", "sequence_length" )],\n         by = c( "dataset", "seqid" )\n      )\n   )\n}\n\n')),(0,o.kt)("p",null,"The idea is that this has both a 'total gene length' (sum of lengths of genes) and the total sequence length (length of\nthe chromosome or contig) in the same dataframe:"),(0,o.kt)("p",null,"You can use it like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"print( compute_lengths_per_chromosome( genes ) )\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# A tibble: 5,469 \xd7 6\n# Groups:   dataset [11]\n   dataset    seqid number_of_genes total_gene_length attributes sequence_length\n   <chr>      <chr>           <int>             <dbl> <chr>                <dbl>\n 1 Acanthoch\u2026 MVNR\u2026              56           1349511 Alias=orp\u2026         2466117\n 2 Acanthoch\u2026 MVNR\u2026              39           1029333 Alias=orp\u2026         2338421\n 3 Acanthoch\u2026 MVNR\u2026              56           1399228 Alias=orp\u2026         2213793\n 4 Acanthoch\u2026 MVNR\u2026              41           1113000 Alias=orp\u2026         2013838\n 5 Acanthoch\u2026 MVNR\u2026              45           1012078 Alias=orp\u2026         1950346\n 6 Acanthoch\u2026 MVNR\u2026              54            989013 Alias=orp\u2026         2094391\n 7 Acanthoch\u2026 MVNR\u2026              84           1074990 Alias=orp\u2026         1729193\n 8 Acanthoch\u2026 MVNR\u2026              72           1486459 Alias=orp\u2026         2368326\n 9 Acanthoch\u2026 MVNR\u2026              50           1237060 Alias=orp\u2026         2396890\n10 Acanthoch\u2026 MVNR\u2026              39            643138 Alias=orp\u2026         1656807\n")),(0,o.kt)("p",null,"And all we have to do is step 4 - sum them up across chromosomes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-r"},"naive_proportions = (\n   compute_lengths_per_chromosome( genes )\n   %>% group_by( dataset )\n   %>% summarise(\n      total_gene_length = sum( total_gene_length ),\n      total_genome_length = sum( sequence_length )\n   )\n   %>% mutate(\n      proportion_in_genes = total_gene_length / total_genome_length\n   )\n)\nprint( naive_proportions )\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# A tibble: 11 \xd7 4\n   dataset                                           total_gene_length total_genome_length proportion_in_genes\n   <chr>                                                         <dbl>               <dbl>               <dbl>\n 1 Acanthochromis_polyacanthus.ASM210954v1.110               422171067           830201259               0.509\n 2 Asparagus_officinalis.Aspof.V1.57                         165883925          1015569172               0.163\n 3 Bufo_bufo-GCA_905171765.1-2022_05-genes                  1290309576          5003028965               0.258\n 4 Camelus_dromedarius.CamDro2.110.chr                       825762826          2052758708               0.402\n 5 Gallus_gallus.bGalGal1.mat.broiler.GRCg7b.110.chr         583352821          1041139641               0.560\n 6 Homo_sapiens.GRCh38.110.chr                              1379802830          3088286401               0.447\n 7 Mus_musculus.GRCm39.110.chr                              1070748851          2723431143               0.393\n 8 Pan_troglodytes.Pan_tro_3.0.110.chr                      1110722691          2967125077               0.374\n 9 Plasmodium_falciparum.ASM276v2.57                          13776689            23292622               0.591\n10 Plasmodium_knowlesi.ASM635v1.57                            12970692            23462187               0.553\n11 Plasmodium_vivax.ASM241v2.57                               14052272            23768694               0.591\nTo figure out how much of the genome is covered by genes, or by exons, we face a problem.\nIn principle we could just add together the gene lengths.\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'(\n   ggplot( data = proportions )\n   + geom_col(\n      aes(\n         x = proportion_in_genes,\n         y = dataset\n      )\n   )\n   + ylab( "Species" )\n   + xlab( "Proportion of genome in genes" )\n   + theme_minimal(16)\n)\n')),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"img",src:t(16083).Z,width:"2266",height:"1284"})),(0,o.kt)("p",null,"Pretty cool huh!  Most species have 40-60% of the genome in genes.  Is this right?"),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"However")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Unfortunately this calculation is (slightly) ",(0,o.kt)("strong",{parentName:"p"},"wrong"),".   Why?"))),(0,o.kt)("p",null,"To get it right, we need to do some more coding..."))}m.isMDXComponent=!0},16083:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/propn_wrong-d05599979d7347ca29c3f24140826561.png"}}]);