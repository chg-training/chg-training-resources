"use strict";(self.webpackChunkchg_training_resources=self.webpackChunkchg_training_resources||[]).push([[9171],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var r=n.createContext({}),p=function(e){var t=n.useContext(r),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(r.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(a),h=i,c=m["".concat(r,".").concat(h)]||m[h]||d[h]||o;return a?n.createElement(c,s(s({ref:t},u),{},{components:a})):n.createElement(c,s({ref:t},u))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,s=new Array(o);s[0]=h;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l[m]="string"==typeof e?e:i,s[1]=l;for(var p=2;p<o;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},27010:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const o={sidebar_position:4},s="Tips and tricks",l={unversionedId:"sequence_data_analysis/building_an_ngs_pipeline/tips_and_tricks",id:"sequence_data_analysis/building_an_ngs_pipeline/tips_and_tricks",title:"Tips and tricks",description:"Here is some guidance to help you write your pipeline. Click the links to jump to the relevant",source:"@site/docs/sequence_data_analysis/building_an_ngs_pipeline/tips_and_tricks.md",sourceDirName:"sequence_data_analysis/building_an_ngs_pipeline",slug:"/sequence_data_analysis/building_an_ngs_pipeline/tips_and_tricks",permalink:"/chg-training-resources/sequence_data_analysis/building_an_ngs_pipeline/tips_and_tricks",draft:!1,editUrl:"https://github.com/chg-training/chg-training-resources/edit/main/docs/sequence_data_analysis/building_an_ngs_pipeline/tips_and_tricks.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"sidebar9",previous:{title:"The pipeline",permalink:"/chg-training-resources/sequence_data_analysis/building_an_ngs_pipeline/pipeline"},next:{title:"Variant calling, phasing and imputation",permalink:"/chg-training-resources/sequence_data_analysis/variant_calling_and_imputation/"}},r={},p=[{value:"Getting started",id:"getting-started",level:3},{value:"Give me a first rule hint?",id:"give-me-a-first-rule-hint",level:3},{value:"How should I get sample information in?",id:"how-should-i-get-sample-information-in",level:3},{value:"How should I run snakemake?",id:"how-should-i-run-snakemake",level:3},{value:"...a second rule hint?",id:"a-second-rule-hint",level:3},{value:"...what about the other rules?",id:"what-about-the-other-rules",level:3},{value:"Keeping a fast iteration time during development.",id:"keeping-a-fast-iteration-time-during-development",level:3},{value:"My snakefiles are getting too big!",id:"my-snakefiles-are-getting-too-big",level:3},{value:"Dealing with intermediate files",id:"dealing-with-intermediate-files",level:3},{value:"But I want to run the yellow bits too!",id:"but-i-want-to-run-the-yellow-bits-too",level:3},{value:"Read groups what now?",id:"read-groups-what-now",level:3},{value:"What&#39;s in the fastq header?",id:"whats-in-the-fastq-header",level:3},{value:"Getting variant-calling rules working",id:"getting-variant-calling-rules-working",level:3},{value:"I can&#39;t install Octopus!",id:"i-cant-install-octopus",level:3},{value:"Octopus is taking too long!",id:"octopus-is-taking-too-long",level:3},{value:"What ploidy?",id:"what-ploidy",level:3},{value:"Tools that use temporary directories",id:"tools-that-use-temporary-directories",level:3},{value:"Tips on using <code>bwa mem</code>",id:"tips-on-using-bwa-mem",level:3},{value:"Tips on using <code>samtools</code>",id:"tips-on-using-samtools",level:3},{value:"Solutions",id:"solutions",level:3},{value:"Good luck!",id:"good-luck",level:2}],u={toc:p},m="wrapper";function d(e){let{components:t,...o}=e;return(0,i.kt)(m,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tips-and-tricks"},"Tips and tricks"),(0,i.kt)("p",null,"Here is some guidance to help you write your pipeline. Click the links to jump to the relevant\nsection."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./#getting-started"},"Wait, what?  How should I start?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#give-me-a-first-rule-hint"},"Give me a first rule hint?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./#how-should-i-get-sample-information-in"},"How should I get sample information in?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./#how-should-i-run-snakemake"},"How should I run snakemake?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#a-second-rule-hint"},"...a second rule hint?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#what-about-the-other-rules"},"...and what about the other rules?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#keeping-a-fast-iteration-time-during-development"},"Keeping a fast iteration time during development"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#my-snakefiles-are-getting-too-big"},"My snakefiles are getting too big!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#dealing-with-intermediate-files"},"Dealing with intermediate files"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#but-I-want-to-run-the-yellow-bits-too"},"But I want to run the yellow bits too!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#read-groups-what-now"},"Read groups what now?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#whats-in-the-fastq-header"},"What's in the fastq header?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#getting-variant-calling-rules-working"},"Getting variant-calling rules working")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#i-cant-install-octopus"},"I can't install Octopus!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#octopus-is-taking-too-long"},"Octopus is taking too long!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#what-ploidy"},"What ploidy?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#tools-that-use-temporary-directories"},"Tools that use temporary directories")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#tips-on-using-bwa-mem"},"Tips on using ",(0,i.kt)("inlineCode",{parentName:"a"},"bwa mem")),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#tips-on-using-samtools"},"Tips on using ",(0,i.kt)("inlineCode",{parentName:"a"},"samtools")),"."),(0,i.kt)("li",{parentName:"ul"},"Or see a ",(0,i.kt)("a",{parentName:"li",href:"#solutions"},"complete solution"),".")),(0,i.kt)("h3",{id:"getting-started"},"Getting started"),(0,i.kt)("p",null,"You should create: a folder called ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," with the data in, a folder called ",(0,i.kt)("inlineCode",{parentName:"p"},"results")," to put\nresults in, and a folder called ",(0,i.kt)("inlineCode",{parentName:"p"},"pipelines")," to put snakemake pipelines in. So your folder will look\nsomething like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"this_folder/\n  data/\n    # reads and reference sequence here\n  pipelines/\n    # snakefiles go here\n  results/\n    # results files go here\n    ...\n")),(0,i.kt)("p",null,"Of course you should already have ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," and snakemake will create the ",(0,i.kt)("inlineCode",{parentName:"p"},"results")," folder as you go.\nSo to get started, all you have to do is write a snakefile in ",(0,i.kt)("inlineCode",{parentName:"p"},"pipelines/"),"."),(0,i.kt)("p",null,"Maybe you want to make an empty snakefile to get started?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"touch pipelines/analysis.snakefile\n")),(0,i.kt)("p",null,"And run it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"snakemake -s pipelines/analysis.snakefile -n\n")),(0,i.kt)("p",null,"Congratulations!  You've started your pipeline."),(0,i.kt)("p",null,"To really get started, you will need some ",(0,i.kt)("a",{parentName:"p",href:"#give-me-a-first-rule-hint"},"rules in there")," and will also\nneed a ",(0,i.kt)("strong",{parentName:"p"},"config file")," as outlined ",(0,i.kt)("a",{parentName:"p",href:"#how-should-i-put-sample-information-in"},"below")," - it can go in\n",(0,i.kt)("inlineCode",{parentName:"p"},"pipelines")," or in the top-level folder, whichever you prefer."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"give-me-a-first-rule-hint"},"Give me a first rule hint?"),(0,i.kt)("p",null,"There are two sensible things you could do at the start of the pipeline."),(0,i.kt)("p",null,"First, you could start at the top-left of the ",(0,i.kt)("a",{parentName:"p",href:"/chg-training-resources/sequence_data_analysis/building_an_ngs_pipeline/pipeline#the-pipeline"},"pipeline"),", and write a\nrule that indexes the reference file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-snakemake"},'rule index_reference_assembly:\n    output:\n        index = "data/reference/Pf3D7_v3.fa.gz.bwt"\n    input:\n        fasta = "data/reference/Pf3D7_v3.fa.gz"\n    shell: """\n        bwa index {input.fasta}\n    """\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Top tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Notice that I wrote the ",(0,i.kt)("strong",{parentName:"p"},"output")," files first.  You don't have to do this, but it makes huge sense for snakemake, which works\nbackwards from outputs to figure out what inputs it needs."))),(0,i.kt)("p",null,"If you run snakemake now:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"snakemake -s pipelines/analysis.snakefile --cores 1\n")),(0,i.kt)("p",null,"You will probably see it indexing the reference assembly.  Well done!"),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"input and wildcards")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"{input.fasta}")," is of course one of snakemake's cool features.  You don't have to write the whole filename out again, just use\nthis form to refer to the filename from the ",(0,i.kt)("inlineCode",{parentName:"p"},"input:")," section."))),(0,i.kt)("h3",{id:"how-should-i-get-sample-information-in"},"How should I get sample information in?"),(0,i.kt)("p",null,"Your pipeline is going to need the sample information in."),(0,i.kt)("p",null,"Although you can add sample information into the top of the snakefile, say:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"samples = [ 'QG0033-C', 'QG0041-C', and so on ]\n")),(0,i.kt)("p",null,"...that's not very flexible.  A better way is to put this information about the samples, and any\nother needed data in through a ",(0,i.kt)("strong",{parentName:"p"},"config file"),"."),(0,i.kt)("p",null,"This is a file called (say) ",(0,i.kt)("inlineCode",{parentName:"p"},"config.json")," that you pass in using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--configfile")," argument. For\nexample, for this project you could use a ",(0,i.kt)("inlineCode",{parentName:"p"},"config.json")," that looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"config.json","config.json":!0},'{\n    "reference": "data/reference/Pf3D7_v3.fa.gz",\n    "fastq_filename_template": "data/reads/{ID}_{read}.fastq.gz",\n    "samples": {\n        "QG0033-C": { "accession": "ERR377582" },\n        "QG0041-C": { "accession": "ERR377591" },\n        "QG0049-C": { "accession": "ERR417627" },\n        "QG0056-C": { "accession": "ERR417621" },\n        "QG0088-C": { "accession": "ERR377629" }\n    }\n}\n')),(0,i.kt)("p",null,"(This contains information copied from ",(0,i.kt)("inlineCode",{parentName:"p"},"samples.tsv"),".) And then you would run snakemake like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"snakemake -s pipelines/analysis.snakefile --configfile config.json\n")),(0,i.kt)("p",null,"The point of this is that it makes it easy to run the pipeline on different sets of data - such as\n",(0,i.kt)("a",{parentName:"p",href:"#keeping-a-fast-iteration-time-during-development"},"a test data for pipeline testing")," - you just\nswap out the config file for a different one."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"In a real pipeline there are likely to be many samples, so it might be better to reference the sample\nsheet in the config file:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"config.json","config.json":!0},'{\n    "reference": "data/reference/Pf3D7_v3.fa.gz",\n    "fastq_filename_template": "data/reads/{ID}_{read}.fastq.gz",\n    "samples": "samples.tsv"\n}\n')),(0,i.kt)("p",{parentName:"div"},"and then have your snakefile load the samples using (for example)\n",(0,i.kt)("a",{parentName:"p",href:"/prerequisites/pandas.md"},"pandas"),":"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre"},"import pandas\nconfig['samples'] = pandas.read_table( \"samples.tsv\" )\n")))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"how-should-i-run-snakemake"},"How should I run snakemake?"),(0,i.kt)("p",null,"Let's say your snakefile is ",(0,i.kt)("inlineCode",{parentName:"p"},"pipelines/analysis.snakefile"),".  I find the best way to run snakemake is to ",(0,i.kt)("em",{parentName:"p"},"always run it\nfrom the top-level folder."),"  That is, as above, you would run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"snakemake -s pipelines/analysis.snakefile -configfile config.json [other options...]\n")),(0,i.kt)("p",null,"Doing this means that in your snakefile you can use relative pathnames. So for example if the input\nfile is one of the data files, you can write:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'rule something\n    input:\n        "data/reads/{ID}.fastq.gz"`\n    output:\n        "results/qc/{ID}.aligned.bam"\n    (etc.)\n')),(0,i.kt)("p",null,"and so on. This is great because you don't need absolute paths; it makes the snakefiles shorter and\nit makes it is easy to copy the code around, or to share the pipeline via github, and so on."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note.")," The snakemake documentation suggests a ",(0,i.kt)("a",{parentName:"p",href:"https://snakemake.readthedocs.io/en/stable/snakefiles/deployment.html"},"similar, but slightly different\nlayout"),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"a-second-rule-hint"},"...a second rule hint?"),(0,i.kt)("p",null,"Well, the second step (top right of ",(0,i.kt)("a",{parentName:"p",href:"/chg-training-resources/sequence_data_analysis/building_an_ngs_pipeline/pipeline#the-pipeline"},"the pipeline"),") is to run fastqc.  A rule to do that is pretty easy,\nright?  Something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'rule run_fastqc:\n    output:\n        html1 = "results/qc/{ID}_1_fastqc.html",\n        html2 = "results/qc/{ID}_2_fastqc.html"\n    input:\n        fq1 = "data/reads/{ID}_1.fq.gz",\n        fq2 = "data/reads/{ID}_2.fq.gz"\n    params:\n        outputdir = "results/qc/"\n    shell: """\n        fastqc -q -o {params.outputdir} {input.fq1} {input.fq2}\n    """\n')),(0,i.kt)("p",null,"You can see this rule contains the ",(0,i.kt)("inlineCode",{parentName:"p"},"{ID}")," which is a snakemake ",(0,i.kt)("strong",{parentName:"p"},"wildcard"),".  If snakemake thinks it needs to make (for example) the file ",(0,i.kt)("inlineCode",{parentName:"p"},"results/qc/A_1_fastqc.html"),", it will run this rule with ",(0,i.kt)("inlineCode",{parentName:"p"},'ID="A"'),"."),(0,i.kt)("p",null,"But there are two problems."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Problem 1"),". If you add this and run snakemake, it won't do anything!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Solution"),": remember the first rule in the snakefile declares the main files it will try to create.  If you want it to\ncreate these fastqc output files, you had better add them there.  The convention is to add a rule called 'all' at the\ntop which lists what you want, something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"rule all:\n    input:\n        fastqc = expand(\n            \"results/qc/{ID}_{read_id}_fastqc.html\",\n            name = config['samples'].keys(),\n            read_id = [ '1', '2' ]\n        )\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"expand()")," function is used there to replace all the ",(0,i.kt)("inlineCode",{parentName:"p"},"ID")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"read_id")," with all the combinations of the arguments."))),(0,i.kt)("p",null,"But there's another, harder problem too!  (This one is actually the trickiest problem in the whole pipeline.)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Problem 2"),".",(0,i.kt)("br",{parentName:"p"}),"\n","The ",(0,i.kt)("a",{parentName:"p",href:"/chg-training-resources/sequence_data_analysis/building_an_ngs_pipeline/pipeline#overview"},"requirements"),' say that we are supposed to name the output files by the sample ID (like "QG0033-C").\nBut the fastq files are named a different way (for these files, it\'s for the accessions, like "ERR377582".)\nSo this means is that ',(0,i.kt)("strong",{parentName:"p"},"the above rule won't fully solve the problem"),". "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Solution")," For fastqc, this is slightly annoying to solve because it ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/s-andrews/FastQC/issues/9"},"doesn't have a way to rename output\nfiles"),".  The easiest way to solve this is first create a re-named copy of\nthe input files.  Let's do that now - what we need is a rule like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'rule make_renamed_fastqs:\n    output:\n        fq1 = "results/renamed_reads/{ID}_1.fastq.gz",\n        fq2 = "results/renamed_reads/{ID}_2.fastq.gz"\n    input:\n        fq1 = "data/reads/{accession}_1.fq.gz",\n        fq2 = "data/reads/{accession}_2.fq.gz"\n    shell: """\n    cp {input.fq1} {output.fq1}\n    cp {input.fq2} {output.fq2}\n    """\n')),(0,i.kt)("p",null,"But how do you get snakemake to compute the accessions in there?"),(0,i.kt)("p",null,"The trick here is remember the golden rule: snakemake works ",(0,i.kt)("strong",{parentName:"p"},"from outputs to inputs"),".  What you need is a function\nthat converts the desired output sample ID (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"QG0033-C"),") into the correct input filename (e.g.\n",(0,i.kt)("inlineCode",{parentName:"p"},"data/reads/ERR377582_1.fastq.gz"),").  Luckily, if you followed the ",(0,i.kt)("a",{parentName:"p",href:"#how-should-i-get-sample-information-in"},"suggestion above"),"\nyou'll have put this information into the config file - so you could get it out using a function like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def get_accession( sample ):\n    return config['samples'][sample]['accession']\n")),(0,i.kt)("p",null,"To plumb this into snakemake, write functions that read in the rule's wildcards and outputs the fastq filename:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def get_fq1_filename( wildcards ):\n    return "data/reads/{accession}_1.fastq.gz".format(\n        accession = get_accession( wildcards.ID )\n    )\ndef get_fq2_filename( wildcards ):\n    return "data/reads/{accession}_2.fastq.gz".format(\n        accession = get_accession( wildcards.ID )\n    )\n')),(0,i.kt)("p",null,"...at which point you can use the function in place of the input filename in the rule:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'rule make_renamed_fastqs:\n    output:\n        fq1 = "results/renamed_reads/{ID}_1.fastq.gz",\n        fq2 = "results/renamed_reads/{ID}_2.fastq.gz"\n    input:\n        fq1 = get_fq1_filename,\n        fq2 = get_fq2_filename\n    shell: """\n    cp {input.fq1} {output.fq1}\n    cp {input.fq2} {output.fq2}\n    """\n')),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Since the data is large and there might be lots of samples, it's actually better to use ",(0,i.kt)("strong",{parentName:"p"},"symbolic links")," here instead of copies.\n(A synbolic link is a bit like a shortcut - a small file that points at the other, larger file.)"),(0,i.kt)("p",{parentName:"div"},"To use symbolic links instead of copies, use ",(0,i.kt)("inlineCode",{parentName:"p"},"ln -s")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"cp")," in the above commands, like this:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre"},"ln -s ../../{input.fq1} {output.fq1}\n")),(0,i.kt)("p",{parentName:"div"},"(The ",(0,i.kt)("inlineCode",{parentName:"p"},"../..")," is needed to get the right path of the linked file relative to the folder where the output is.)"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Finally")," update the ",(0,i.kt)("inlineCode",{parentName:"p"},"run_fastqc")," rule to use these files instead:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'rule run_fastqc:\n    output:\n        html1 = "results/qc/{ID}_1_fastqc.html",\n        html2 = "results/qc/{ID}_2_fastqc.html"\n    input:\n        fq1 = "results/renamed_reads/{ID}_1.fastq.gz",\n        fq2 = "results/renamed_reads/{ID}_2.fastq.gz"\n    etc.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Phew!")),(0,i.kt)("p",null,"If all this seemed like a lot of work - it was."),(0,i.kt)("p",null,"(But note it has made the rest of the pipeline easier because you can use the re-named fastq files as input to other\nrules, too - such as the step that aligns reads.)"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"what-about-the-other-rules"},"...what about the other rules?"),(0,i.kt)("p",null,"You have to write these yourself!"),(0,i.kt)("p",null,"However you should"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Look at the ",(0,i.kt)("a",{parentName:"p",href:"/chg-training-resources/sequence_data_analysis/building_an_ngs_pipeline/pipeline#the-pipeline"},"pipeline steps")," to see what steps are needed...")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"...and look at the ",(0,i.kt)("a",{parentName:"p",href:"/chg-training-resources/sequence_data_analysis/introduction_to_next_generation_sequencing_data_analysis/Aligning_reads"},"sequence data pipeline tutorial")," to see what the needed\ncommands are.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"And perhaps look back at the ",(0,i.kt)("a",{parentName:"p",href:"#give-me-a-first-rule-hint"},"first rule hint")," and the ",(0,i.kt)("a",{parentName:"p",href:"#a-second-rule-hint"},"second rule hint")," to figure out how to write them.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To make life easier you might want to use the renamed input fastq files ",(0,i.kt)("a",{parentName:"p",href:"#a-second-rule-hint"},"described above")," as\ninputs. That way you should just be able to use '{ID}' as the wildcard throughout the pipeline, i.e. like this:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'output: "results/somewhere/output_file_{ID}.txt"\ninput: "somewhere_else/input_file_{ID}.txt"\n')),(0,i.kt)("p",null,"and snakemake will figure out the correct input file from the output file."),(0,i.kt)("p",null,"Good luck!"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"keeping-a-fast-iteration-time-during-development"},"Keeping a fast iteration time during development."),(0,i.kt)("p",null,"The data from this pipeline are pretty large, and it will take a while for the pipeline to run.\nThat's no good for pipeline development as you'll want to know pretty quickly whether it works or doesn't work.\n(After all you don't want to wait two hours only to discover that it failed.)"),(0,i.kt)("p",null,"A good idea would therefore be to start by creating smaller, sub-sampled version of the\ndatasets (whichever of the above raw data you use). For example, you could run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"gunzip -c filename.fastq.gz | head -n 4000 | gzip -c > filename.subsampled.fastq\n")),(0,i.kt)("p",null,"to take the first few reads from each file."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Question")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The above command specifies a multiple of 4 lines. Why? How many reads does the above\ncommand extract?"))),(0,i.kt)("p",null,"If you set your config files the way I ",(0,i.kt)("a",{parentName:"p",href:"#how-should-i-get-sample-information-in"},"suggested above")," then you can have one\nconfig file for the smaller test dataset (giving them new IDs, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"QG0033-c-subsampled"),", to avoid conflicts). Then,\nonce it is all working, you can rerun using the real config file specifying the full dataset."),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Of course, for this to work you'll have to ",(0,i.kt)("strong",{parentName:"p"},"make sure your rules find the fastq files using the paths from the config\nfile")," rather than hard-coding them. I called that ",(0,i.kt)("inlineCode",{parentName:"p"},"fastq_filename_template")," in the ",(0,i.kt)("a",{parentName:"p",href:"#how-should-i-get-sample-information-in"},"suggested config\nfile"),"."))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"my-snakefiles-are-getting-too-big"},"My snakefiles are getting too big!"),(0,i.kt)("p",null,"After a while you'll find your pipelines have loads of rules and can become hard to understand."),(0,i.kt)("p",null,"To fix this, I often use the snakemake\n",(0,i.kt)("a",{parentName:"p",href:"https://snakemake.readthedocs.io/en/stable/snakefiles/modularization.html"},(0,i.kt)("inlineCode",{parentName:"a"},"include")," feature")," to split up the\nfile into components of related rules. For example, in our pipeline there are a bunch of rules for\nread qc, some for alignment and post-processing, a bunch for variant calling, and a bunch for\ncomputing coverage and so on. So for the whole pipeline above I might end up with this structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"analysis folder/\n    pipelines/\n        master.snakmake\n        functions.snakemake\n        qc.snakemake\n        alignment.snakemake\n        variants.snakemake\n        coverage.snakemake\n")),(0,i.kt)("p",null,"And the first few lines of ",(0,i.kt)("inlineCode",{parentName:"p"},"master.snakemake")," would be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'include: "functions.snakemake"\ninclude: "qc.snakemake"\ninclude: "alignment.snakemake"\ninclude: "variants.snakemake"\ninclude: "coverage.snakemake"\n')),(0,i.kt)("p",null,"Now you can write one 'module' of the pipeline in each file, keeping related rules together without\nthem becoming too big and unweildy."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You'll notice I included a ",(0,i.kt)("inlineCode",{parentName:"p"},"functions.snakemake")," above. This is where I tend to put helper\nfunctions, like the ",(0,i.kt)("inlineCode",{parentName:"p"},"get_fq1_filename()")," function mentioned above."))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"dealing-with-intermediate-files"},"Dealing with intermediate files"),(0,i.kt)("p",null,"The alignment steps in ",(0,i.kt)("a",{target:"_blank",href:a(37).Z},"our pipeline")," in particular are notorious for generating intermediate files.  Indeed:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the alignment step outputs a SAM file..."),(0,i.kt)("li",{parentName:"ul"},"which is converted to a BAM file..."),(0,i.kt)("li",{parentName:"ul"},"which you then have to sort by position..."),(0,i.kt)("li",{parentName:"ul"},"in which you then have to mark the duplicates..."),(0,i.kt)("li",{parentName:"ul"},"which are then indexed.")),(0,i.kt)("p",null,"That's at least 3 intermediate files along the way. We don't want to keep these, they were just needed during the pipeline."),(0,i.kt)("p",null,"There are a few different ways to deal with this. One way is just to use unix pipes to pipe command together within rules - as in"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"bwa mem reference.fa read1.fq read2.fq | samtools view -b -o aligned.bam\n")),(0,i.kt)("p",null,"However, I find that this makes the pipeline hard to debug (which command failed? you can't tell.)"),(0,i.kt)("p",null,"Instead, I typically go for temp files and use the snakemake ",(0,i.kt)("inlineCode",{parentName:"p"},"temp()")," function to tell snakemake files are temporary. So I might write the alignment rule as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'rule align_reads:\n  output:\n    sam = temp( "results/alignment/{ID}.sam" )\n  input:\n    fq1 = something,\n    fq2 = something\n  shell: "bwa mem ..."\n')),(0,i.kt)("p",null,"As you can see, I tend to also put temporary files into their own ",(0,i.kt)("inlineCode",{parentName:"p"},"tmp/")," folder as well - this\navoids cluttering up the results folder when jobs fail."),(0,i.kt)("p",null,"Second, rules can refer to other rule outputs, so the next step in the pipeline can be written:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'rule fix_matepair_information_and_convert_to_bam:\n  output:\n    bam = temp( "results/alignment/tmp/{ID}.bam" )\n  input:\n    sam = rules.align_reads.output.sam\n  shell: "samtools fixmate -m {input.sam} {output.bam}"\n')),(0,i.kt)("p",null,"and so on down the pipeline."),(0,i.kt)("p",null,"Third - ",(0,i.kt)("inlineCode",{parentName:"p"},"snakemake")," actually has a ",(0,i.kt)("a",{parentName:"p",href:"https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#piped-output"},"named pipe\noutput")," feature, so you can get the\nbenefit of the UNIX pipe with the same syntax as above - just replace ",(0,i.kt)("inlineCode",{parentName:"p"},"temp()")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"pipe()")," and it should automatically\nwork. (I've never actually used this feature but it's a nice idea for this step, because the SAM file output by ",(0,i.kt)("inlineCode",{parentName:"p"},"bwa"),"\nmight be huge when applied to real data.)"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"but-i-want-to-run-the-yellow-bits-too"},"But I want to run the yellow bits too!"),(0,i.kt)("p",null,"Be my guest! Running variant annotation in particular would be a good thing to do, as would looking\nat post-alignment QC metrics."),(0,i.kt)("h3",{id:"read-groups-what-now"},"Read groups what now?"),(0,i.kt)("p",null,"Some programs require reads to have 'read groups'. What are they and how do you get them in there?"),(0,i.kt)("p",null,"BAM files can easily be post-processed and merged. Read groups are a way to put information in that\nrecords the original sample and the sequencing run, so that downstream programs can distinguish\nthese. The read groups are encoded in the ",(0,i.kt)("inlineCode",{parentName:"p"},"@RG")," header field of the BAM file (which you can see\nusing ",(0,i.kt)("inlineCode",{parentName:"p"},"samtools view -h"),"), and in the ",(0,i.kt)("inlineCode",{parentName:"p"},"RG")," tag for each alignment. A good document on read groups\nis ",(0,i.kt)("a",{parentName:"p",href:"https://gatk.broadinstitute.org/hc/en-us/articles/360035890671-Read-groups"},"this one on the GATK\nwebsite"),"."),(0,i.kt)("p",null,"In our pipeline these don't seem that important (we have one alignment file per input fastq file\npair), but in other pipelines the same sample might have been sequenced many times and the results\nmerged. So for sensible downstream analysis it would be important to keep track of the originating\nsamples. In particular, variant callers like ",(0,i.kt)("inlineCode",{parentName:"p"},"octopus")," require you to have read groups in the BAM\nfile."),(0,i.kt)("p",null,"The simplest way to put read groups into the BAM file is to have ",(0,i.kt)("inlineCode",{parentName:"p"},"bwa")," put them in at the alignment\nstep. For our experiment this can be done using the ",(0,i.kt)("inlineCode",{parentName:"p"},"-R")," option - e.g. for sample ",(0,i.kt)("inlineCode",{parentName:"p"},"QC0033-C")," this\nwould look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'bwa mem -R "@RG\\tID:ERR377582\\tSM:QG0033-C\\tPL:ILLUMINA" [other arguments]\n')),(0,i.kt)("p",null,"You can put other stuff into a read group (see below), but the run ID, the sample name, and the\nplatform are all that we need just now."),(0,i.kt)("p",null,"Of course you have to be able to generate this for each sample. With the layout described above, I\nwrote the following code (which I put, of course, in ",(0,i.kt)("inlineCode",{parentName:"p"},"pipelines/functions.snakemake"),") to do it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"def get_read_group_line( name ):\n    sample = find_sample_with_name( name )\n    return \"@RG\\\\tID:{ID}\\\\tSM:{sample}\\\\tPL:ILLUMINA\".format(\n        ID = sample['ID'],\n        sample = sample['name']\n    )\n")),(0,i.kt)("p",null,"The alignment step could then be updated to use this function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'rule align_reads:\n  input:\n    fq1 = something,\n    fq2 = something\n  output:\n    sam = temp( "results/alignment/{ID}.sam" )\n  params:\n    read_group_spec = lambda wildcards: get_read_group_line( wildcards.name )\n  shell: """\n    bwa mem -R {params.read_group_spec} ...\n  """\n')),(0,i.kt)("p",null,"If you look at the resulting files, they have an ",(0,i.kt)("inlineCode",{parentName:"p"},"@RG")," header record and ",(0,i.kt)("inlineCode",{parentName:"p"},"RG")," tags for each read -\noctopus will then accept these files."),(0,i.kt)("p",null,"What else can go in a read group? As the ",(0,i.kt)("a",{parentName:"p",href:"https://gatk.broadinstitute.org/hc/en-us/articles/360035890671-Read-groups"},"GATK documentation\nindicates")," the read\ngroup can also contain information about the sequencing flowcell, lane, and sample barcode, and an\nidentifier for the library itself. Unfortunately some of this information can be hard to come by\ndepending on where your reads come from. As we describe below, some of it can be obtained from the\nread names in the fastq files. For the data in this practical, some parts such as the library\nidentifier can be found on the ",(0,i.kt)("a",{parentName:"p",href:"ERR377582"},"ENA website"),". But in general it's a bit hard to put it\nall together. (Luckily just the sample name and identifier are enough for our analysis.)"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"whats-in-the-fastq-header"},"What's in the fastq header?"),(0,i.kt)("p",null,"If you look at the header / read name rows of a fastq file you'll see they actually contain a bunch\nof information - like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"@ERR377582.7615542 HS23_10792:2:2307:6524:31920#15/1\n")),(0,i.kt)("p",null,"This row tells us the sample ID (",(0,i.kt)("inlineCode",{parentName:"p"},"ERR377582"),") and the read identifier (",(0,i.kt)("inlineCode",{parentName:"p"},"7615542"),"). And this is\nfollowed by information identifying the instrument that generated the reads (",(0,i.kt)("inlineCode",{parentName:"p"},"HS23_10792"),"), the\nflowcell lane and tile number in the lane (",(0,i.kt)("inlineCode",{parentName:"p"},"2:2307"),"), the coordinates of the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.broadinstitute.org/files/shared/illuminavids/clusterGenSlides.pdf"},"cluster")," within the\ntile (",(0,i.kt)("inlineCode",{parentName:"p"},"6524"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"31920"),"), a number identifying the index of the sample within a multiplexed set of\nsamples (i.e. all run at the same time; ",(0,i.kt)("inlineCode",{parentName:"p"},"#15"),"), and whether it's read 1 or 2."),(0,i.kt)("p",null,"Some of this info can be put in the read group as well."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note.")," The format of this information is not standard across platforms, and it changes depending\non your data provider. Some other examples can be found ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/FASTQ_format#Illumina_sequence_identifiers"},"on\nwikipedia")," or on the\n",(0,i.kt)("a",{parentName:"p",href:"https://gatk.broadinstitute.org/hc/en-us/articles/360035890671-Read-groups"},"GATK read groups page"),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"getting-variant-calling-rules-working"},"Getting variant-calling rules working"),(0,i.kt)("p",null,"The variant calling rule will be slightly different because it will call across all samples at once.\nSo it has multiple input files, and only one output file."),(0,i.kt)("p",null,"This turns out to be easy in snakemake.  Instead of making a single filename input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'rule my_rule:\n    output: "results/variants.vcf.gz"\n    input: "results/alignment/{ID}.bam"\n')),(0,i.kt)("p",null,"...you make the input a list of files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'rule my_rule:\n    output:\n        vcf = "results/variants.vcf.gz"\n    input:\n        bams = [\n            "results/alignment/Sample_1.bam",\n            "results/alignment/Sample_2.bam",\n            etc.\n        ]\n    shell: """\n        octopus -i {input.alignments} (other arguments...)\n    """\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"In the shell command, the multiple files are just pasted next to each other, so the command ends up looking like:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre"},'octopus -i "results/alignment/Sample_1.bam" "results/alignment/Sample_2.bam" (other arguments...)\n')))),(0,i.kt)("p",null,"That works just fine... but is a bit annoying as you'd have to hard-code all those sample IDs again."),(0,i.kt)("p",null,"Luckily snakemake provides a short-hand for this, in the form of the ",(0,i.kt)("inlineCode",{parentName:"p"},"expand()")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'rule my_rule:\n    output:\n        vcf = "results/variants.vcf.gz"\n    input:\n        bams = expand(\n            "results/alignment/{ID}.bam",\n            config[\'samples\'].keys()\n        )\n    (etc.)\n')),(0,i.kt)("p",null,"So now your rule will take multiple outputs and produce one input."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"i-cant-install-octopus"},"I can't install Octopus!"),(0,i.kt)("p",null,"On my system I have the problem that conda won't install Octopus for me.\n(This is because there's no ",(0,i.kt)("a",{parentName:"p",href:"https://anaconda.org/bioconda/octopus"},"conda package available on bioconda for my mac"),".)"),(0,i.kt)("p",null,"If you run into this, you have three options:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Give up and don't bother with variant calls.  (Have you really had enough of this pipelining challenge?)"),(0,i.kt)("li",{parentName:"ol"},"Install octopus yourself ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/luntergroup/octopus"},"from github"),".  See the 'Quick start' instructions there."),(0,i.kt)("li",{parentName:"ol"},"Or switch to another variant caller.")),(0,i.kt)("p",null,"The simplest variant caller you could use is actually ",(0,i.kt)("inlineCode",{parentName:"p"},"bcftools")," (which conda probably will install for you.)  "),(0,i.kt)("p",null,"There's a worked example of using ",(0,i.kt)("inlineCode",{parentName:"p"},"bcftools")," on ",(0,i.kt)("a",{parentName:"p",href:"/chg-training-resources/sequence_data_analysis/variant_calling_and_imputation/Variant_calling"},"this page"),", but\nhere's a quick guide.  "),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Calling with bcftools ")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Calling variants using bcftools takes two steps:"),(0,i.kt)("ol",{parentName:"div"},(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"bcftools mpileup")," to summarise the data in the reads at each position - something like:")),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre"},"bcftools mpileup \\\n--output-type z \\\n-f [reference fasta filename] \\\n-o results/variants/mpileup.vcf.gz \\\nsample1.bam sample2.bam ...\n")),(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"--output-type z")," part of the above command tells ",(0,i.kt)("inlineCode",{parentName:"p"},"bcftools")," to output a ",(0,i.kt)("a",{parentName:"p",href:"https://samtools.github.io/hts-specs/VCFv4.2.pdf"},(0,i.kt)("strong",{parentName:"a"},"(b)gzipped VCF\nfile")),", which is a standard way of encoding genetic variation data."),(0,i.kt)("p",{parentName:"div"},"(The backslash characters here (",(0,i.kt)("inlineCode",{parentName:"p"},"\\"),") are 'line continuation' characters - they just tell bash to treat the above as one command.)"),(0,i.kt)("ol",{parentName:"div",start:2},(0,i.kt)("li",{parentName:"ol"},"The output file of the ",(0,i.kt)("inlineCode",{parentName:"li"},"mpileup")," step has information for all samples at every site in the reference genome (so\nsomething like 23 million rows).  What we want is just to find the sites where there's genetic variation and compute\ntheir genotypes - that's what ",(0,i.kt)("inlineCode",{parentName:"li"},"bcftools call")," does.  Run it something like this:")),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre"},"bcftools call \\\n--output-type z \\\n--multiallelic-caller \\\n--variants-only \\\n -o results/variants/calls.vcf.gz \\\nresults/variants/mpileup.vcf.gz\n")),(0,i.kt)("p",{parentName:"div"},"If you look at the output file, you should see it has rows for only a subset of positions in the genome - the sites\nwhere ",(0,i.kt)("inlineCode",{parentName:"p"},"bcftools")," thinks there are genetic variants."))),(0,i.kt)("p",null,"If you don't fancy ",(0,i.kt)("inlineCode",{parentName:"p"},"bcftools")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"octopus"),", the ",(0,i.kt)("a",{parentName:"p",href:"/chg-training-resources/sequence_data_analysis/building_an_ngs_pipeline/pipeline#the-pipeline"},"pipeline")," also has a list of other variant\ncallers you could attempt. They will all give similar, but slightly different output (it'd be interesting to compare...)"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"octopus-is-taking-too-long"},"Octopus is taking too long!"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/luntergroup/octopus"},"Octopus variant caller")," can take a long time to do its\nwork - hopefully reflecting that it is trying its best to make high-quality variant calls. This\nmight take too long to run on your laptop. If so, here are some options for speeding it up:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If you have a multi-core CPU, you can use more threads (",(0,i.kt)("inlineCode",{parentName:"p"},"--threads")," argument).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Restrict to a set of regions. You can add the ",(0,i.kt)("inlineCode",{parentName:"p"},"--regions")," option to tell Octopus to only work on specified regions. For this\ntutorial, please include these regions: ",(0,i.kt)("inlineCode",{parentName:"p"},"--regions Pf3D7_02_v3:616190-656190 Pf3D7_02_v3:779288-859288\nPf3D7_11_v3:1023035-1081305"),". (This brought the calling down to about half and hour when I tried it.)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You could also try the Octopus 'fast' or 'very fast' modes - though I haven't tried this."))),(0,i.kt)("p",null,"See ",(0,i.kt)("inlineCode",{parentName:"p"},"octopus --help")," for a full list of options."),(0,i.kt)("p",null,"(In general this might be less of a problem for real work as you might run it a compute cluster.)"),(0,i.kt)("p",null,"Another option is to try a different variant caller - ",(0,i.kt)("a",{parentName:"p",href:"https://gatk.broadinstitute.org/hc/en-us"},(0,i.kt)("inlineCode",{parentName:"a"},"GATK HaplotypeCaller")),",\n",(0,i.kt)("a",{parentName:"p",href:"https://www.nature.com/articles/nbt.4235"},(0,i.kt)("inlineCode",{parentName:"a"},"DeepVariant"))," or ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/freebayes/freebayes"},(0,i.kt)("inlineCode",{parentName:"a"},"freebayes"))," might be\npossibilities. For a simple approach you could also use ",(0,i.kt)("a",{parentName:"p",href:"https://samtools.github.io/bcftools/bcftools.html"},(0,i.kt)("inlineCode",{parentName:"a"},"bcftools mpileup")," and ",(0,i.kt)("inlineCode",{parentName:"a"},"bcftools\ncall"))," (this is likely to be substantially faster as it relies on the input\nalignments does not try to reconstruct local haplotypes near each variant.). "),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"what-ploidy"},"What ploidy?"),(0,i.kt)("p",null,"Blood-stage malaria parasites are ",(0,i.kt)("a",{parentName:"p",href:"https://www.cdc.gov/malaria/about/biology/index.html"},"haploid"),".\nSo set octopus ",(0,i.kt)("inlineCode",{parentName:"p"},"--organism-ploidy 1"),"."),(0,i.kt)("p",null,"On the other hand, ",(0,i.kt)("a",{parentName:"p",href:"https://doi.org/10.7554/eLife.40845.001"},"mixed infections are common"),", and to\nhandle this most projects actually treat samples as if they were diploid - they then treat\nheterozygote calls as 'mixed' calls. This is ",(0,i.kt)("em",{parentName:"p"},"ad hoc")," but works ok. So you could set\n",(0,i.kt)("inlineCode",{parentName:"p"},"--organism-ploidy 2"),"."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"bcftools call")," has a similar option, called ",(0,i.kt)("inlineCode",{parentName:"p"},"--ploidy"),"."))),(0,i.kt)("p",null,"For the purposes of this tutorial you could do either - or both so we can see the difference?"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#Tips-and-tricks"},"Go back to the list of tips and tricks"),"."),(0,i.kt)("h3",{id:"tools-that-use-temporary-directories"},"Tools that use temporary directories"),(0,i.kt)("p",null,"Some tools have that bad habit of leaving 'stuff' in the directory you run them in. This is really\nannoying for pipelines because you don't want that - you want to put the temp stuff away somewhere\nout of the way. ",(0,i.kt)("inlineCode",{parentName:"p"},"octopus")," is one of these tools: if you run it you'll see it outputs a directory\ncalled ",(0,i.kt)("inlineCode",{parentName:"p"},"octopus-temp"),"."),(0,i.kt)("p",null,"Really the only way to deal with this is use the program help to find the option that renames the\ntemp dir - then send it somewhere different. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"octopus [other options] --temp-directory-prefix results/variants/tmp/octopus/\n")),(0,i.kt)("p",null,"This will probably work here. (In general you may need to use snakemake wildcards etc. to name this\ntemp directory so it doesn't clash if the same rule runs multiple jobs in parallel.)s"),(0,i.kt)("h3",{id:"tips-on-using-bwa-mem"},"Tips on using ",(0,i.kt)("inlineCode",{parentName:"h3"},"bwa mem")),(0,i.kt)("p",null,"Here are a few options you can use to ",(0,i.kt)("inlineCode",{parentName:"p"},"bwa mem")," which you might want to consider using."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"bwa mem")," for a list of options.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The basic usage is ",(0,i.kt)("inlineCode",{parentName:"p"},"bwa mem -o output.sam [path to indexed fasta file] read1.fq.gz read2.fq.gz"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"-t")," option tells ",(0,i.kt)("inlineCode",{parentName:"p"},"bwa")," to use more than one thread.  (If doing this, make sure to also ",(0,i.kt)("a",{parentName:"p",href:"https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#threads"},"tell snakemake the number of threads it will use"),".)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"-R")," option specifies that ",(0,i.kt)("inlineCode",{parentName:"p"},"bwa")," should include a read group header line and read groups tags in the output - this is ",(0,i.kt)("a",{parentName:"p",href:"#read-groups-what-now"},"described above"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"bwa")," will output only the best alignment for each read.  However, if you specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"-a")," option then ",(0,i.kt)("inlineCode",{parentName:"p"},"bwa")," will output multiple possible alignments for each read, but all except one will be marked as 'not a primary alignment' (using the ",(0,i.kt)("a",{parentName:"p",href:"https://broadinstitute.github.io/picard/explain-flags.html"},(0,i.kt)("inlineCode",{parentName:"a"},"SAM flags")),").  This can be useful in cases when you want to consider possible alternate alignments."))),(0,i.kt)("p",null,"There are also other aligners out there. ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lh3/minimap2"},(0,i.kt)("inlineCode",{parentName:"a"},"minimap2"))," is another\ngood choice. Nevertheless the field typically currently uses ",(0,i.kt)("inlineCode",{parentName:"p"},"bwa mem")," for Illumina short-read NGS\ndata."),(0,i.kt)("h3",{id:"tips-on-using-samtools"},"Tips on using ",(0,i.kt)("inlineCode",{parentName:"h3"},"samtools")),(0,i.kt)("p",null,"Here are some tips on using ",(0,i.kt)("inlineCode",{parentName:"p"},"samtools"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"samtools")," for a list of commands, and ",(0,i.kt)("inlineCode",{parentName:"p"},"samtools [command]")," for a list of options for each command.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Some commands, like ",(0,i.kt)("inlineCode",{parentName:"p"},"samtools markdup"),", take the output filename as a seperate argument.  But others, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"samtools view")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"samtools sort"),", want you to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"-o")," option to specify the output file (otherwise they output to standard output).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"multiqc")," can read ",(0,i.kt)("inlineCode",{parentName:"p"},"samtools stats")," output, useful for post-alignment QC."))),(0,i.kt)("h3",{id:"solutions"},"Solutions"),(0,i.kt)("p",null,"A complete solution to this tutorial can be found\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/chg-training/chg-training-resources/tree/main/docs/sequence_data_analysis/building_an_ngs_pipeline/solutions"},"in this folder"),"."),(0,i.kt)("p",null,"Warning: this is a full solution!"),(0,i.kt)("p",null,"(As mentioned above, I used a rename-files-at-the end strategy so this might look a bit different to yours.)"),(0,i.kt)("h2",{id:"good-luck"},"Good luck!"))}d.isMDXComponent=!0},37:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/pipeline-f7b1538da80891cc35465d36fdd41f64.svg"}}]);